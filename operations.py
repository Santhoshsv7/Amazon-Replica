import json
import string
import random
from json import JSONDecodeError

def Register(type,member_json_file,admin_json_file,Full_Name,Address,Email,Password):
    '''Register Function || Return True if registered successfully else False'''
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='member':
        f=open(member_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    else:
        return False

def Login(type,members_json_file,admin_json_file,Email,Password):
    '''Login Functionality || Return True if successfully logged in else False'''
    d=0
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
    else:
        f=open(members_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Email"]==Email and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def Create_Product(owner,product_json_file,product_ID,product_name,manufacturer_name,price,discount,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    f = open(product_json_file,'r+')
    d = {
        "Created By": owner,
        "Product ID": product_ID,
        "Product Name": product_name,
        "Manufacturer Name": manufacturer_name,
        "Price": price,
        "Discount": discount,
        "Total Stock Available": total_stock_available
    }
    try:
        content = json.load(f)
        if d not in content:
            content.append(d)
            f.seek(0)
            f.truncate()
            json.dump(content,f)
            f.close()
            return True
    except JSONDecodeError:
        l = []
        l.append(d)
        json.dump(l,f)
        f.close()
        return True 
    f.close()
    return False
    
def Read_Products(owner,product_json_file):
    '''Reading Products created by the admin(owner)'''
    f = open(product_json_file,'r+')
    product_list = []
    try:
        content = json.load(f)
        for product in content:
            if product["Created By"] == owner:
                product_list.append(product)
        f.close()
        return product_list
    except JSONDecodeError:
        f.close()
        return product_list
    
def Read_Product_By_ID(product_json_file,product_ID,Details):
    '''Reading product by ID'''
    f = open(product_json_file, 'r')
    try:
        content = json.load(f)
        for i in content:
            if i["Product ID"] == product_ID:
                Details.append(i)
        return Details
    except JSONDecodeError:
        f.close()
    f.close()

def Update_Product(product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    f = open(product_json_file, 'r+')
    content = json.load(f)
    for i in content:
        if i["Product ID"] == product_ID:
            if detail_to_be_updated == 'Product Name':
                i[detail_to_be_updated] = new_value
                f.seek(0)
                f.truncate()
                json.dump(content,f)
                f.close()
                return True
            elif detail_to_be_updated == 'Manufacturer Name':
                i[detail_to_be_updated] = new_value
                f.seek(0)
                f.truncate()
                json.dump(content,f)
                f.close()
                return True
            elif detail_to_be_updated == 'Price':
                i[detail_to_be_updated] = int(new_value)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
                f.close()
                return True
            elif detail_to_be_updated == 'Discount':
                if '%' not in new_value:
                        new_value+="%"
                i[detail_to_be_updated] = new_value
                f.seek(0)
                f.truncate()
                json.dump(content,f)
                f.close()
                return True
            elif detail_to_be_updated == 'Total Stock Available':
                i[detail_to_be_updated] = int(new_value)                
                f.seek(0)
                f.truncate()
                json.dump(content,f)
                f.close()
                return True
    f.close()
    return False
    
def Delete_Product(product_json_file,product_ID):
    '''Deleting Product || Return True if successfully deleted else False'''
    f = open(product_json_file, 'r+')
    content = json.load(f)
    for i in content:
        if i["Product ID"] == product_ID:
            content.remove(i)
            f.seek(0)
            f.truncate()
            json.dump(content,f)
            f.close()
            return True
    f.close()
    return False

def Update_Member(member_json_file,name,detail_to_be_updated,new_value):
    '''Updating Member Details || Return True if successfully updated else False'''
    f = open(member_json_file,'r+')
    content = json.load(f)
    for i in content:
        if i["Full Name"] == name:
            if detail_to_be_updated == "Full Name":
                i[detail_to_be_updated] = new_value
                f.seek(0)
                f.truncate()
                json.dump(content,f)
                f.close()
                return True
            elif detail_to_be_updated == "Address":
                i[detail_to_be_updated] = new_value
                f.seek(0)
                f.truncate()
                json.dump(content,f)
                f.close()
                return True
            elif detail_to_be_updated == "Email":
                if '@' in detail_to_be_updated and '.com' in detail_to_be_updated and len(detail_to_be_updated)!=0:
                    i[detail_to_be_updated] = new_value
                    f.seek(0)
                    f.truncate()
                    json.dump(content,f)
                    f.close()
                    return True
            elif detail_to_be_updated == "Password":
                if len(detail_to_be_updated)!=0:
                    i[detail_to_be_updated] = new_value
                    f.seek(0)
                    f.truncate()
                    json.dump(content,f)
                    f.close()
                    return True
    f.close()
    return False

def Place_Order(order_json_file,ordered_by,delivery_address,product_json_file,product_ID,Quantity,Order_ID):
    '''Placing Order, Calculate the Price after discount and Total cost of the order || Return True if order placed successfully else False'''
    f1 = open(product_json_file, 'r+')
    f2 = open(order_json_file,'r+')
    try:
        content1 = json.load(f1)
        for i in content1:
            if i["Product ID"] == product_ID and i["Total Stock Available"] >= Quantity:
                d = {
                    "Order ID":Order_ID,
                    "Product Name":i["Product Name"],
                    "Price":i["Price"],
                    "Discount":i["Discount"],
                    "Price after Discount":i['Price']-((i['Price']*(int(i["Discount"][:-1])))/100),
                    "Quantity":Quantity,
                    "Total Cost":int((i["Price"]*Quantity)-((i["Price"]*Quantity*int(i["Discount"][:-1]))/100)),
                    "Ordered By":ordered_by,
                    "Delivering to":delivery_address
                }   
                content2=json.load(f2)
                if d not in content2:
                    content2.append(d)
                    f2.seek(0)
                    f2.truncate()
                    json.dump(content2,f2)
                    f2.close()
                i["Total Stock Available"] -= Quantity
                f1.seek(0)
                f1.truncate()
                json.dump(content1,f1)
                f1.close()
                return True
    except:
        l=[]
        l.append(d)
        json.dump(l,f2)
        f2.close()
        i["Total Stock Available"] -= Quantity
        f1.seek(0)
        f1.truncate()
        json.dump(content1,f1)
        f1.close()
        return True
    f1.close()
    f2.close()
    return False

def Order_History(order_json_file,Name,details):
    '''Append the order information into details list'''
    f = open(order_json_file, 'r+')
    content = json.load(f)
    for i in content:
        if i["Ordered By"] == Name:
            details.append(i)
    return details